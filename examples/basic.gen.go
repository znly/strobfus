// Code generated by "strobfus"; DO NOT EDIT.
// source: https://github.com/znly/strobfus/blob/master/main.go

package main

import (
	"crypto/aes"
	"crypto/cipher"
	"fmt"
)

var hello string

var yolo = ""

var arr = []string{}

var (
	str1 = ""
	arr1 = []string{}
	arr2 = []string{}
	arr3 = []string{}
)

func init() {
	var __privateKeyObfuscator = []byte{
		0xd8, 0x2e, 0xa0, 0x8f, 0xf8, 0x4c, 0xa0, 0x73, 0x8e, 0x74, 0x1b, 0x95, 0xdf, 0xe2, 0xf0, 0xb0,
		0x60, 0x8b, 0x6c, 0xbc, 0x5e, 0x2a, 0x1b, 0x36, 0x64, 0xe9, 0xb4, 0xad, 0xff, 0x31, 0x79, 0x6a,
	}
	var __nonceObfuscator = []byte{
		0x73, 0x06, 0x2b, 0xb2, 0xd1, 0x46, 0x33, 0xd8, 0xc9, 0xa2, 0xbd, 0xcc,
	}

	block, err := aes.NewCipher(__privateKeyObfuscator)
	if err != nil {
		panic(err)
	}
	aesgcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err)
	}
	{
		var __yolo = []byte{
			0x83, 0xb4, 0x71, 0x19, 0x81, 0x97, 0x18, 0xd1, 0x26, 0xf7, 0xe7, 0x93, 0xbf, 0xb9, 0xf1, 0xd6,
			0x7a, 0xc4, 0xfb, 0x91, 0x08,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __yolo, nil)
		if err != nil {
			panic(err)
		}
		yolo = string(plaintext)
	}
	{
		var __arr = [][]byte{
			{
				0x92, 0xa3, 0x8e, 0xad, 0xf3, 0x78, 0x0f, 0xd3, 0xed, 0x06, 0x7a, 0x9d, 0x45, 0x76, 0xa5, 0xf4,
				0xf6,
			},
			{
				0x91, 0xe2, 0x3d, 0x9a, 0x36, 0x8c, 0xf6, 0x5a, 0x8b, 0xf0, 0xf7, 0x10, 0xa4, 0x2e, 0x83, 0xfd,
				0x22,
			},
		}
		ret := make([]string, 0, len(__arr))
		for _, v := range __arr {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		arr = ret
	}
	{
		var __str1 = []byte{
			0x90, 0xb4, 0x61, 0x0f, 0x9a, 0x6e, 0x15, 0x6a, 0xd3, 0x7f, 0x83, 0xc4, 0x99, 0x00, 0xcd, 0x6b,
			0xda, 0xab, 0xf9, 0x85, 0xe4, 0x8c,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __str1, nil)
		if err != nil {
			panic(err)
		}
		str1 = string(plaintext)
	}
	{
		var __arr1 = [][]byte{
			{
				0x95, 0xb4, 0x7b, 0xc4, 0xb1, 0x78, 0x0e, 0xd5, 0x1a, 0xfe, 0x3d, 0x07, 0x5b, 0x33, 0x5b, 0xdc,
				0xd5, 0x0e, 0x50,
			},
			{
				0x91, 0xba, 0x66, 0xcc, 0xcc, 0xab, 0x4a, 0xec, 0xad, 0xef, 0x59, 0x41, 0x54, 0xb1, 0x1c, 0xc1,
				0x7b, 0x66, 0x13,
			},
		}
		ret := make([]string, 0, len(__arr1))
		for _, v := range __arr1 {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		arr1 = ret
	}
	{
		var __arr2 = [][]byte{
			{
				0x9b, 0xa5, 0x97, 0x2a, 0xaa, 0xb6, 0xe3, 0x6d, 0xdd, 0xc7, 0xda, 0x3c, 0xe3, 0xfe, 0x57, 0xc9,
				0xdb,
			},
			{
				0x94, 0x20, 0xe8, 0xc2, 0x78, 0x91, 0xfc, 0xc1, 0x20, 0xeb, 0x61, 0x86, 0x87, 0xc6, 0xe9, 0xe7,
				0x5e,
			},
		}
		ret := make([]string, 0, len(__arr2))
		for _, v := range __arr2 {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		arr2 = ret
	}
	{
		var __arr3 = [][]byte{
			{
				0x86, 0xb5, 0x7d, 0x1d, 0x80, 0x7e, 0x55, 0xd6, 0x79, 0x03, 0xfc, 0x90, 0x29, 0xbc, 0x4f, 0x3e,
				0xe9, 0xd0, 0x39, 0xd1, 0xe9, 0xab, 0x30, 0xcb, 0x45, 0xec, 0x36, 0x12,
			},
		}
		ret := make([]string, 0, len(__arr3))
		for _, v := range __arr3 {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		arr3 = ret
	}
	{
	fmt.Println("This my init")
}
}
