package basic

import (
	"crypto/aes"
	"crypto/cipher"
)

var hello string

var yolo = ""

var arr = []string{}

var (
	str1 = ""
	arr1 = []string{}
	arr2 = []string{}
)

func init() {
	var __privateKeyObfuscator = []byte{
		0x6a, 0x29, 0x5c, 0x9a, 0x1c, 0xec, 0xd6, 0x77, 0xdc, 0x52, 0x6f, 0x5a, 0x8d, 0x91, 0xf9, 0xdb,
		0x48, 0xd2, 0x81, 0x08, 0x09, 0xf0, 0xce, 0xdf, 0x90, 0x5d, 0xd7, 0x49, 0x0b, 0xed, 0x9a, 0x0c,
	}
	var __nonceObfuscator = []byte{
		0x94, 0x96, 0xff, 0x49, 0xd4, 0xa2, 0x99, 0x72, 0x17, 0x5a, 0x96, 0x37,
	}

	block, err := aes.NewCipher(__privateKeyObfuscator)
	if err != nil {
		panic(err)
	}
	aesgcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err)
	}
	{
		var __yolo = []byte{
			0x2c, 0x2e, 0x04, 0xe1, 0x3d, 0x7f, 0x10, 0x7d, 0xc0, 0xf5, 0xd1, 0x0a, 0x68, 0x11, 0x31, 0x63,
			0xe6, 0x2a, 0xf9, 0x4b, 0xda,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __yolo, nil)
		if err != nil {
			panic(err)
		}
		yolo = string(plaintext)
	}
	{
		var __arr = [][]byte{
			{
				0x3d, 0xb2, 0x98, 0xa6, 0x26, 0x3a, 0xdd, 0x08, 0x40, 0x80, 0x1a, 0x94, 0xb3, 0x29, 0x0e, 0xf4,
				0x72,
			},
			{
				0x3e, 0xdd, 0xb2, 0xf6, 0x89, 0x43, 0xde, 0x73, 0x2a, 0x39, 0x4a, 0x31, 0x79, 0x0a, 0x77, 0xc2,
				0x23,
			},
		}
		ret := make([]string, 0, len(__arr))
		for _, v := range __arr {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		arr = ret
	}
	{
		var __str1 = []byte{
			0x3f, 0x2e, 0x14, 0xf7, 0x26, 0x95, 0x5f, 0x92, 0x33, 0x0b, 0xc5, 0xfe, 0x8e, 0x59, 0x5d, 0x8a,
			0xda, 0xa0, 0x18, 0xfc, 0x36, 0x3b,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __str1, nil)
		if err != nil {
			panic(err)
		}
		str1 = string(plaintext)
	}
	{
		var __arr1 = [][]byte{
			{
				0x3a, 0x2e, 0x0e, 0x93, 0xde, 0x5f, 0xb9, 0x06, 0x16, 0x9c, 0x0f, 0x5f, 0x1d, 0xd4, 0x41, 0xb3,
				0xf4, 0xee, 0x43,
			},
			{
				0x3e, 0x20, 0x13, 0x21, 0xf0, 0x85, 0x23, 0xa6, 0xd2, 0x74, 0x37, 0x4c, 0xfd, 0x7a, 0x7c, 0xac,
				0x17, 0x92, 0x3f,
			},
		}
		ret := make([]string, 0, len(__arr1))
		for _, v := range __arr1 {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		arr1 = ret
	}
	{
		var __arr2 = [][]byte{
			{
				0x34, 0x7d, 0x4f, 0x15, 0x6a, 0x55, 0xd5, 0x68, 0x55, 0xae, 0xa9, 0xed, 0xc5, 0xc1, 0x61, 0x77,
				0xc4,
			},
			{
				0x3b, 0x6c, 0xcc, 0x07, 0x78, 0xc8, 0xdb, 0xfe, 0x95, 0xf2, 0xbb, 0xdf, 0x27, 0x6f, 0xfc, 0x98,
				0xd0,
			},
		}
		ret := make([]string, 0, len(__arr2))
		for _, v := range __arr2 {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		arr2 = ret
	}
}
